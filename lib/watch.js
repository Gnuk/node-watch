/**
 *  Module dependencies
 */

var fs   = require('fs')
  , path = require('path');
 

/**
 * Utility functions to synchronously test whether the giving path 
 * is a file or a directory.
 */
var is = (function(ret) {
  ['File', 'Directory'].forEach(function(method) {
    var memo = {}
      , fileObj;
    ret[method] = function(path) {
      if (memo[path] !== undefined) {
        return memo[path];
      }
      try {
        fileObj = fs.statSync(path);
      } catch(e) {
        return memo[path] = false;
      }
      return memo[path] = fileObj['is'+method](path); 
    }
  });
  return ret;
}({}));


/**
 *  A Container for storing unique filenames.
 */
var fileNameCache = (function(cache) {
  return {
    push: function(name) {
      cache[name] = 1;
      return this;
    },
    each: function() {
      var temp = [];
      for (var name in cache) {
        if (cache.hasOwnProperty(name) && is.File(name)) {
          temp.push(name);
        }
      }
      Array.prototype.forEach.apply(temp, arguments);
      return this;
    },
    clear: function(){
      cache = {};
      return this;
    }
  };
}({}));     


/**
 * Abstracting the way of avoiding duplicate function call.
 */
var worker = (function() {
  var free = true;
  return {
    busydoing: function(cb) {
      if (free) {
        free = false;
        cb.call();
      }
    },
    free: function() {
      free = true;
    }
  }
}());


/**
 * Delay function call and ignore invalid filenames
 */
var normalizeCall = function(cb, fname) {
  // Store each name of the modifying or temporary files generated by an editor.
  fileNameCache.push(fname);
     
  worker.busydoing(function() {
    // A heuristic delay of the write-to-file process  
    setTimeout(function() {
      
      // When the write-to-file process is done, send all filtered filenames
      // to the callback function and call it.
      fileNameCache
        .each(function(f) { cb.call(null, f); })
        .clear();

      worker.free();

    }, 100);
  });
};


/**
 * Watch a file or a directory recursively
 *  
 * @param {String} dir
 * @param {Function} cb
 * 
 *   watch('directory', function(file) {
 *     console.log(file, ' changed');
 *   });
 */
function watch(dir, cb) {

  if (is.File(dir)) {
    fs.watchFile(dir, function(err) {
      normalizeCall(cb, dir);
    });
    return;
  }

  if (is.Directory(dir)) {
    fs.watch(dir, function(err, fname) {
      normalizeCall(cb,  
        path.join(dir, fname)
      );
    });

    fs.readdir(dir, function(err, files) {
      if (err) throw err;
      files.forEach(function(n) { 
        var file = path.join(dir, n);
        if ( is.Directory(file) ) {
          watch(file, cb);
        }
      });
    });     
  }

}; 
          

// Expose
module.exports = watch
          
